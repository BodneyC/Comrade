Given buf:
  first line
  2nd line
  3rd line

Execute("Register buffer with initial lines"):
  let buffer = bufnr('%')

  let init_lines = ['a', 'b']
  call comrade#buffer#Register(buffer, 42, init_lines)

  let btype = getbufvar(buffer, '&buftype')
  AssertEqual 'acwrite', btype
  AssertEqual 42, comrade#bvar#get(buffer, 'channel')
  AssertEqual init_lines, nvim_buf_get_lines(buffer, 0, -1, v:true)
  AssertEqual 0, getbufvar(buffer, '&modified')
  Assert !comrade#jetbrain#IsChannelExisting(42)
  " Write current buffer
  AssertThrows execute("w")

  let btype = getbufvar(buffer, '&buftype')
  AssertEqual '', btype

Given buf:
  first line

After:
  call delete(bufname('%'))

Execute("Register buffer without initial lines"):
  let buffer = bufnr('%')

  execute('w!')
  AssertEqual 0, getbufvar(buffer, '&modified')

  call comrade#buffer#Register(buffer, 42, v:false)

  let btype = getbufvar(buffer, '&buftype')
  AssertEqual 'acwrite', btype

  AssertEqual 42, comrade#bvar#get(buffer, 'channel')
  AssertEqual ['first line'], nvim_buf_get_lines(buffer, 0, -1, v:true)
  AssertEqual 0, getbufvar(buffer, '&modified')

Given buf:
  first line

Execute("Reload buffer, should be unregistered"):
  let buffer = bufnr('%')

  call comrade#buffer#Register(buffer, 42, v:false)
  let map = comrade#bvar#all(buffer)
  Assert !empty(map)

  execute('e!')
  Assert empty(map)

Given buf:
  new

" This test doesn't really work. No idea how to create a new buffer in vader.
Execute("Reload a new buffer, unregistered should be no problem"):
  let buffer = bufnr('%')
  call comrade#buffer#Unregister(buffer)

" Register should be a idempotent operation
Execute("Register a registered buffer"):
  let buffer = bufnr('%')

  call comrade#buffer#Register(buffer, 42, v:false)
  let insights = {
    \ 0 : [{'id' : 11, 's_line' : 0, 'e_line' : 1, 's_col' : 0, 'e_col' : 1, 'severity' : 400}],
  \}
  call comrade#SetInsights(42, buffer, insights)
  Assert !empty(comrade#bvar#get(buffer, 'insight_map'))

  " Register again, the bvar should only have the channel left
  call comrade#buffer#Register(buffer, 42, v:false)
  AssertEqual {'channel' : 42}, comrade#bvar#all(buffer)

