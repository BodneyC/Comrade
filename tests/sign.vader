Given foobar:
  first line
  2nd line
  3rd line

Before:
  function! CollectSigns()
      redir => l:output
         silent exec 'sign place'
      redir END

      let l:actual_sign_list = []

      for l:line in split(l:output, "\n")
        let l:match = matchlist(l:line, '\v^.*\=(\d+).*\=(\d+).*\=(CDE[a-zA-Z]+Sign)')

        if len(l:match) > 0
          call add(l:actual_sign_list, [l:match[1], l:match[2], l:match[3]])
        endif
      endfor

      return l:actual_sign_list
  endfunction

After:
  delfunction CollectSigns

Execute(""):
  let insights = [
    \ {'id' : 11, 's_line' : 1, 'severity' : 400},
    \ {'id' : 3, 's_line' : 3, 'severity' : 300}
  \]
  let buffer = bufnr("%")
  call comrade#sign#SetSigns(buffer, insights)
  AssertEqual [['3', '3', 'CDEWarningSign'], ['1', '11', 'CDEErrorSign']], CollectSigns()

  let insights = [
    \ {'id' : 22, 's_line' : 2, 'severity' : 400},
    \ {'id' : 3, 's_line' : 3, 'severity' : 300}
  \]
  call comrade#sign#SetSigns(buffer, insights)
  AssertEqual [['3', '3', 'CDEWarningSign'], ['2', '22', 'CDEErrorSign']], CollectSigns()

  let insights = [
    \ {'id' : 22, 's_line' : 2, 'severity' : 400},
    \ {'id' : 33, 's_line' : 3, 'severity' : 400}
  \]
  call comrade#sign#SetSigns(buffer, insights)
  AssertEqual [['2', '22', 'CDEErrorSign'], ['3', '33', 'CDEErrorSign']], CollectSigns()
